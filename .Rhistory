y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
# Set parameter
n = 10
mu = 0
sd = 3
standard_error = sd/sqrt(n)
critical_value_prob = 0.025
x_low_lim = -3
x_upper_lim = 3
# Set graphing parameter
text_y_position = 0.55
text_t_score_x_position = -2.3
text_t_score_y_position = -1
current_x_upper_y_lim = 0.45
Output_gif_name = 'Plot8_moving_X_with_t_distribution_positive_critical_value.gif'
saveGIF_simple(for (moving_x in seq(0,3,0.25)) {
# Initialited data to construct the distribution
# Construct a standard normal distribution
x = seq(x_low_lim,x_upper_lim,0.01)
y = sgt::dsgt(x = x,mu = mu,sigma = standard_error)
plot2_data_in_loop = as.data.frame(cbind(x, y))
# Created data to fill the area with critical value
x_critical_value = -qt(p = critical_value_prob,df = n - 1) #positive_critical_value
x_crtical_value_seq = seq(x_critical_value,x_upper_lim,0.01)
y_critical_value = sgt::dsgt(x = x_crtical_value_seq, mu = mu, sigma = standard_error)
critical_value_data = as.data.frame(cbind(x_crtical_value_seq,y_critical_value))
# Caculated t_score & p_value
p_value = round_simple(pt(q = -abs(t_score),df = n - 1),4)
t_score = (moving_x - mu)/standard_error
text_p_value = glue('p = {p_value}')
text_t_score = paste('$\\t =  \\frac{',round_simple(moving_x,2),' -  0}{',sd,'/\\sqrt{',n,'}}$ = ', round_simple(t_score,2))
text_subtitle = paste('Changing X - $\\mu$')
text_title = 'Relationship Between t score & Sampling Mean Distribution'
# Created plot
if (t_score < x_critical_value) { # if_else statment to show red area when fix_X exceeded critical boundary (i.e. 1.96 t_score). The else chunk code is same as the code in the if chunk except added a line of code for filling the area beyond critical value with red
plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
geom_line() +
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
qnorm(0.025)
pnorm(-1.959964)
x_critical_value
# Set parameter
n = 10
mu = 0
sd = 3
standard_error = sd/sqrt(n)
critical_value_prob = 0.025
x_low_lim = -3
x_upper_lim = 3
# Set graphing parameter
text_y_position = 0.55
text_t_score_x_position = -2.3
text_t_score_y_position = -1
current_x_upper_y_lim = 0.45
Output_gif_name = 'Plot8_moving_X_with_t_distribution_positive_critical_value.gif'
saveGIF_simple(for (moving_x in seq(0,3,0.25)) {
# Initialited data to construct the distribution
# Construct a standard normal distribution
x = seq(x_low_lim,x_upper_lim,0.01)
y = sgt::dsgt(x = x,mu = mu,sigma = standard_error)
plot2_data_in_loop = as.data.frame(cbind(x, y))
# Created data to fill the area with critical value
x_critical_value = sgt::qsgt(p = critical_value_prob,mu = mu, sigma = standard_error) #positive_critical_value
x_crtical_value_seq = seq(x_critical_value,x_upper_lim,0.01)
y_critical_value = sgt::dsgt(x = x_crtical_value_seq, mu = mu, sigma = standard_error)
critical_value_data = as.data.frame(cbind(x_crtical_value_seq,y_critical_value))
# Caculated t_score & p_value
p_value = round_simple(sgt::psgt(q = -abs(t_score),mu = mu,sigma = standard_error),4)
t_score = (moving_x - mu)/standard_error
text_p_value = glue('p = {p_value}')
text_t_score = paste('$\\t =  \\frac{',round_simple(moving_x,2),' -  0}{',sd,'/\\sqrt{',n,'}}$ = ', round_simple(t_score,2))
text_subtitle = paste('Changing X - $\\mu$')
text_title = 'Relationship Between t score & Sampling Mean Distribution'
# Created plot
if (t_score < x_critical_value) { # if_else statment to show red area when fix_X exceeded critical boundary (i.e. 1.96 t_score). The else chunk code is same as the code in the if chunk except added a line of code for filling the area beyond critical value with red
plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
geom_line() +
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
# Set parameter
n = 10
mu = 0
sd = 3
standard_error = sd/sqrt(n)
critical_value_prob = 0.025
x_low_lim = -3
x_upper_lim = 3
# Set graphing parameter
text_y_position = 0.55
text_t_score_x_position = -2.3
text_t_score_y_position = -1
current_x_upper_y_lim = 0.45
Output_gif_name = 'Plot8_moving_X_with_t_distribution_positive_critical_value.gif'
saveGIF_simple(for (moving_x in seq(0,3,0.25)) {
# Initialited data to construct the distribution
# Construct a standard normal distribution
x = seq(x_low_lim,x_upper_lim,0.01)
y = sgt::dsgt(x = x,mu = mu,sigma = standard_error)
plot2_data_in_loop = as.data.frame(cbind(x, y))
# Created data to fill the area with critical value
x_critical_value = sgt::qsgt(prob = critical_value_prob,mu = mu, sigma = standard_error) #positive_critical_value
x_crtical_value_seq = seq(x_critical_value,x_upper_lim,0.01)
y_critical_value = sgt::dsgt(x = x_crtical_value_seq, mu = mu, sigma = standard_error)
critical_value_data = as.data.frame(cbind(x_crtical_value_seq,y_critical_value))
# Caculated t_score & p_value
p_value = round_simple(sgt::psgt(quant = -abs(t_score),mu = mu,sigma = standard_error),4)
t_score = (moving_x - mu)/standard_error
text_p_value = glue('p = {p_value}')
text_t_score = paste('$\\t =  \\frac{',round_simple(moving_x,2),' -  0}{',sd,'/\\sqrt{',n,'}}$ = ', round_simple(t_score,2))
text_subtitle = paste('Changing X - $\\mu$')
text_title = 'Relationship Between t score & Sampling Mean Distribution'
# Created plot
if (t_score < x_critical_value) { # if_else statment to show red area when fix_X exceeded critical boundary (i.e. 1.96 t_score). The else chunk code is same as the code in the if chunk except added a line of code for filling the area beyond critical value with red
plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
geom_line() +
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
# Set parameter
n = 10
mu = 0
sd = 3
standard_error = sd/sqrt(n)
critical_value_prob = 0.025
x_low_lim = -3
x_upper_lim = 3
# Set graphing parameter
text_y_position = 0.55
text_t_score_x_position = -2.3
text_t_score_y_position = -1
current_x_upper_y_lim = 0.45
Output_gif_name = 'Plot8_moving_X_with_t_distribution_positive_critical_value.gif'
saveGIF_simple(for (moving_x in seq(0,3,0.25)) {
# Initialited data to construct the distribution
# Construct a standard normal distribution
x = seq(x_low_lim,x_upper_lim,0.01)
y = sgt::dsgt(x = x,mu = mu,sigma = standard_error)
plot2_data_in_loop = as.data.frame(cbind(x, y))
# Created data to fill the area with critical value
x_critical_value = -sgt::qsgt(prob = critical_value_prob,mu = mu, sigma = standard_error) #positive_critical_value
x_crtical_value_seq = seq(x_critical_value,x_upper_lim,0.01)
y_critical_value = sgt::dsgt(x = x_crtical_value_seq, mu = mu, sigma = standard_error)
critical_value_data = as.data.frame(cbind(x_crtical_value_seq,y_critical_value))
# Caculated t_score & p_value
p_value = round_simple(sgt::psgt(quant = -abs(t_score),mu = mu,sigma = standard_error),4)
t_score = (moving_x - mu)/standard_error
text_p_value = glue('p = {p_value}')
text_t_score = paste('$\\t =  \\frac{',round_simple(moving_x,2),' -  0}{',sd,'/\\sqrt{',n,'}}$ = ', round_simple(t_score,2))
text_subtitle = paste('Changing X - $\\mu$')
text_title = 'Relationship Between t score & Sampling Mean Distribution'
# Created plot
if (t_score < x_critical_value) { # if_else statment to show red area when fix_X exceeded critical boundary (i.e. 1.96 t_score). The else chunk code is same as the code in the if chunk except added a line of code for filling the area beyond critical value with red
plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
geom_line() +
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
# Set parameter
n = 10
mu = 0
sd = 3
standard_error = sd/sqrt(n)
critical_value_prob = 0.025
x_low_lim = -3
x_upper_lim = 3
# Set graphing parameter
text_y_position = 0.55
text_t_score_x_position = -2.3
text_t_score_y_position = -1
current_x_upper_y_lim = 0.45
Output_gif_name = 'Plot8_moving_X_with_t_distribution_positive_critical_value.gif'
saveGIF_simple(for (moving_x in seq(0,3,0.25)) {
# Initialited data to construct the distribution
# Construct a standard normal distribution
x = seq(x_low_lim,x_upper_lim,0.01)
y = sgt::dsgt(x = x,mu = mu,sigma = standard_error)
plot2_data_in_loop = as.data.frame(cbind(x, y))
# Created data to fill the area with critical value
x_critical_value = -sgt::qsgt(prob = critical_value_prob,mu = mu, sigma = standard_error) #positive_critical_value
x_crtical_value_seq = seq(x_critical_value,x_upper_lim,0.01)
y_critical_value = sgt::dsgt(x = x_crtical_value_seq, mu = mu, sigma = standard_error)
critical_value_data = as.data.frame(cbind(x_crtical_value_seq,y_critical_value))
# Caculated t_score & p_value
p_value = round_simple(sgt::psgt(quant = -abs(t_score),mu = 0,sigma = 1),4)
t_score = (moving_x - mu)/standard_error
text_p_value = glue('p = {p_value}')
text_t_score = paste('$\\t =  \\frac{',round_simple(moving_x,2),' -  0}{',sd,'/\\sqrt{',n,'}}$ = ', round_simple(t_score,2))
text_subtitle = paste('Changing X - $\\mu$')
text_title = 'Relationship Between t score & Sampling Mean Distribution'
# Created plot
if (t_score < x_critical_value) { # if_else statment to show red area when fix_X exceeded critical boundary (i.e. 1.96 t_score). The else chunk code is same as the code in the if chunk except added a line of code for filling the area beyond critical value with red
plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
geom_line() +
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
# Set parameter
n = 10
mu = 0
sd = 3
standard_error = sd/sqrt(n)
critical_value_prob = 0.025
x_low_lim = -3
x_upper_lim = 3
# Set graphing parameter
text_y_position = 0.55
text_t_score_x_position = -2.3
text_t_score_y_position = -1
current_x_upper_y_lim = 0.45
Output_gif_name = 'Plot8_moving_X_with_t_distribution_positive_critical_value.gif'
saveGIF_simple(for (moving_x in seq(0,3,0.25)) {
# Initialited data to construct the distribution
# Construct a standard normal distribution
x = seq(x_low_lim,x_upper_lim,0.01)
y = sgt::dsgt(x = x,mu = mu,sigma = standard_error)
plot2_data_in_loop = as.data.frame(cbind(x, y))
# Created data to fill the area with critical value
x_critical_value = -sgt::qsgt(prob = critical_value_prob,mu = mu, sigma = standard_error) #positive_critical_value
x_crtical_value_seq = seq(x_critical_value,x_upper_lim,0.01)
y_critical_value = sgt::dsgt(x = x_crtical_value_seq, mu = mu, sigma = standard_error)
critical_value_data = as.data.frame(cbind(x_crtical_value_seq,y_critical_value))
# Caculated t_score & p_value
p_value = round_simple(sgt::psgt(quant = -abs(t_score),mu = 0,sigma = 1),4)
t_score = (moving_x - mu)/standard_error
text_p_value = glue('p = {p_value}')
text_t_score = paste('$\\t =  \\frac{',round_simple(moving_x,2),' -  0}{',sd,'/\\sqrt{',n,'}}$ = ', round_simple(t_score,2))
text_subtitle = paste('Changing X - $\\mu$')
text_title = 'Relationship Between t score & Sampling Mean Distribution'
# Created plot
if (p_value < critical_value_prob) { # if_else statment to show red area when fix_X exceeded critical boundary (i.e. 1.96 t_score). The else chunk code is same as the code in the if chunk except added a line of code for filling the area beyond critical value with red
plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
geom_line() +
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
# Set parameter
n = 10
mu = 0
sd = 3
standard_error = sd/sqrt(n)
critical_value_prob = 0.025
x_low_lim = -3
x_upper_lim = 3
# Set graphing parameter
text_y_position = 0.55
text_t_score_x_position = -2.3
text_t_score_y_position = -1
current_x_upper_y_lim = 0.45
Output_gif_name = 'Plot8_moving_X_with_t_distribution_positive_critical_value.gif'
saveGIF_simple(for (moving_x in seq(0,3,0.25)) {
# Initialited data to construct the distribution
# Construct a standard normal distribution
x = seq(x_low_lim,x_upper_lim,0.01)
y = sgt::dsgt(x = x,mu = mu,sigma = standard_error)
plot2_data_in_loop = as.data.frame(cbind(x, y))
# Created data to fill the area with critical value
x_critical_value = -sgt::qsgt(prob = critical_value_prob,mu = mu, sigma = standard_error) #positive_critical_value
x_crtical_value_seq = seq(x_critical_value,x_upper_lim,0.01)
y_critical_value = sgt::dsgt(x = x_crtical_value_seq, mu = mu, sigma = standard_error)
critical_value_data = as.data.frame(cbind(x_crtical_value_seq,y_critical_value))
# Caculated t_score & p_value
p_value = round_simple(sgt::psgt(quant = -abs(t_score),mu = 0,sigma = 1),4)
t_score = (moving_x - mu)/standard_error
text_p_value = glue('p = {p_value}')
text_t_score = paste('$\\t =  \\frac{',round_simple(moving_x,2),' -  0}{',sd,'/\\sqrt{',n,'}}$ = ', round_simple(t_score,2))
text_subtitle = paste('Changing X - $\\mu$')
text_title = 'Relationship Between t score & Sampling Mean Distribution'
# Created plot
if (p_value > critical_value_prob) { # if_else statment to show red area when fix_X exceeded critical boundary (i.e. 1.96 t_score). The else chunk code is same as the code in the if chunk except added a line of code for filling the area beyond critical value with red
plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
geom_line() +
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
lims(y = c(0,.6))}
else {plot_ = plot2_data_in_loop %>%
ggplot(data =.,aes(x = x,y = y)) +
# Created the distribution line
geom_line() +
# Added critical line: used 1.96 as X since this is a standard normal distribution
geom_area(data = critical_value_data, aes(x = x_crtical_value_seq, y = y_critical_value),fill = 'red') +
# Created the moving_x line
geom_line(data = data.frame(x = c(moving_x,moving_x), y = c(0,current_x_upper_y_lim)),color = 'blue') +
# Added title and x & y axis name
labs(title = text_title,
subtitle = TeX(text_subtitle),
y = 'Frequency') +
theme_classic() +
# Display t_score and p_value formula
annotate(geom = 'text',x = text_t_score_x_position, y = text_y_position, label = TeX(text_t_score)) +
annotate(geom = 'text',x = text_t_score_y_position, y = text_y_position, label = text_p_value) +
# Set y limit
lims(y = c(0,.6))}
print(plot(plot_))},
movie_name = Output_gif_name,
clone_repository_path = clone_repository_path,
loop_speed = 0.4, loop_number = 1)
?sgt::psgt()
x1 = rnorm(1000,sd = 5)
x2 = rnorm(1000,4,2)
cor(x1,x2)
y = rnorm(1000,mean = 3,sd = 1.5)
cor(x1,y)
cor(x2,y)
cor(sort(x1),sort(y))
cor(x2,y)
x1 = rnorm(1000,sd = 5)
x2 = rnorm(1000,4,2)
y = rnorm(1000,mean = 3,sd = 1.5)
data = data.frame(cbind(y,x1,x2))
